import Cocoa

// Define data types for K5 sound data model

struct EnvelopeSegment {
    var rate: Int
    var level: Int
}

struct Envelope {
    var isMax: Bool // not used for DFG envelopes
    var segments: [EnvelopeSegment]  // six segments
}

// Use enum like a a discriminated union; either keys are tracked, or
// tracking is fixed with the given key
enum KeyTracking {
    case track
    case fix(key: Int)  // key = 0~127
}


// DHG and DDF have identical envelopes, but the segment of a harmonic envelope
// has the `isMax` setting (see K5 manual, p. 21)

struct Amplifier {
    var isActive: Bool
    var attackVeocityDepth: Int // 0~±31
    var pressureDepth: Int      // 0~±31
    var keyScalingDepth: Int    // 0~±31
    var lfoDepth: Int           // 0~31
    var attackVelocityRate: Int  // 0~±15
    var releaseVelocityRate: Int // 0~±15
    var keyScalingRate: Int      // 0~±15
    
}

enum LFOShape: Int {
    case triangle = 1
    case inverseTriangle = 2
    case square = 3
    case inverseSquare = 4
    case sawtooth = 5
    case invertedSawtooth = 6
}

struct LFO {
    var shape: LFOShape
    var speed: Int // 0~99
    var delay: Int // 0~31
    var trend: Int // 0~31
}

struct Filter {
    var isActive: Bool  // param 105
    var isModulationActive: Bool  // param 106
    var cutoff: Int  // 0~99
    var cutoffModulation: Int // 0~31
    var slope: Int // 0~31
    var slopeModulation: Int // 0~31
    var flatLevel: Int  // 0~31
    var velocityDepth: Int // 0~±31
    var pressureDepth: Int // 0~±31
    var keyScalingDepth: Int // 0~±31
    var envelopeDepth: Int // 0~±31
    var velocityEnvelopeDepth: Int // 0~±31
    var lfoDepth: Int  // 0~31
}

struct Formant {
    var isActive: Bool
    var levels: [Int]   // 11 bands, corresponding to C-1 ~ C9, value 0~99
}

enum ModulationAssign: Int {
    case dfglfo = 0
    case dhg = 1
    case cutoff = 2
    case slope = 3
    case off = 4
}

struct Harmonic {
    var level: Int   // 0~99
    var isModulationActive: Bool  // true if modulation is on for the containing source
    var envelopeNumber: Int  // user harmonic envelope number 0/1, 1/2, 2/3 or 3/4
}

struct HarmonicEnvelopeSettings {
    var isActive: Bool
    var effect: Int  // 0~31 (SysEx manual says "sx envy off", maybe should be "eff"?)
}

enum HarmonicSelection: Int {
    case live = 0
    case die = 1
    case all = 2
}

// Harmonic modulation is either off, or on
enum HarmonicModulation {
    case off
    case on(envelopeNumber: Int)
    
}
struct HarmonicSettings {
    var velocityDepth: Int   // 0~±31
    var pressureDepth: Int   // 0~±31
    var keyScalingDepth: Int  // 0~±31
    var lfoDepth: Int  // 0~31
    
    var envelopeSettings: HarmonicEnvelopeSettings
    var isModulationActive: Bool
    var selection: HarmonicSelection
    
    var rangeFrom: Int // 1~63
    var rangeTo: Int // 1~63
    
    var odd: HarmonicModulation
    var even: HarmonicModulation
    var octave: HarmonicModulation
    var fifth: HarmonicModulation
    var all: HarmonicModulation
    
    var angle: Int   // 0/-, 1/0, 1/+ (maybe should be 2/+ ?)
    var number: Int  // 1~63
    
    var isShadowOn: Bool
}

struct KeyScaling {
    var right: Int  // 0~±31
    var left: Int   // 0~±31
    var breakpoint: Int // 0~127
}

struct Source {
    var envelopeDelay: Int  // 0~31
    var pedalDepth: Int     // 0~31
    var wheelDepth: Int     // 0~31
    var pedalAssign: ModulationAssign
    var wheelAssign: ModulationAssign
    
    // DFG
    var coarse: Int  // 0~±48
    var fine: Int    // 0~±31
    var keyTracking: KeyTracking
    var envelopeDepth: Int // 0~±24
    var pressureDepth: Int // 0~±31
    var benderDepth: Int   // 0~24
    var velocityEnvelopeDepth: Int  // 0~±31
    var lfoDepth: Int // 0~31
    var pressureLFODepth: Int  // 0~±31
    
    var envelopeLooping: Bool
    var envelope: Envelope
    
    // DHG
    var harmonics: [Harmonic]  // there are 63 harmonics per source
    var harmonicSettings: HarmonicSettings
    var harmonicEnvelopes: [Envelope]  // four 6-segment harmonic envelopes
    
    // DDF (S381~S426)
    var filter: Filter
    var filterEnvelope: Envelope
    
    // DDA
    var amplifier: Amplifier
    
    // LFO
    var lfo: LFO
    
    // KS
    var keyScaling: KeyScaling
    
}


enum SourceMode: Int {
    case twin = 0
    case full = 1
}

// TODO: Construct a CharacterSet with just the characters allowed in a name:
// (0~9, A~Z, -, :, /, *, ?, !, #, &, (, ), ", +, ., =, space)

struct Single {
    var name: String  // max 8 characters (S1~S8)
    var volume: Int   // 0~63
    var balance: Int  // 0~±31

    // The envelope delay, pedal depth, wheel depth, pedal assign, and
    // wheel assign are part of the source definitions. (S11~S18)
    
    var portamento: Bool
    var portamentoSpeed: Int       // 0~63
    var mode: SourceMode  // called "s2 mode" in the SysEx manual
    var picMode: Int  // TODO: What is the "pic mode" setting?
    
    // DFG
    var source1: Source
    var source2: Source
    
    // DFT (Digital Format Filter)
    var formant: Formant
}

typealias Byte = UInt8

let rawData: [Byte] = [
    0x04, 0x0c, 0x04, 0x0f, 0x05, 0x07, 0x05, 0x03,  // 4C 4F 57 53
    0x05, 0x04, 0x05, 0x02, 0x05, 0x03, 0x03, 0x01,  // 54 52 53 31
    0x03, 0x0f,  // volume = 3Fh = 63
    0x0f, 0x0b,  // balance = FBh
    0x00, 0x00,
    0x00, 0x00,
    0x00, 0x00,
    0x00, 0x00,
    0x0f, 0x0a,
    0x00, 0x06,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x02,
    0x0f, 0x04, 0x0f, 0x04, 0x00, 0x00, 0x0f, 0x06, 0x04, 0x00, 0x04, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
    0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00,
    0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00,
    0x01, 0x0f, 0x01, 0x0f, 0x01, 0x0f, 0x01, 0x0f, 0x01, 0x0f, 0x01, 0x0f,
    0x00, 0x00, 0x00, 0x00, 0x0e, 0x01, 0x0e, 0x01, 0x00, 0x00, 0x00, 0x00,
    0x06, 0x03, 0x06, 0x03, 0x04, 0x0f, 0x05, 0x07, 0x04, 0x05, 0x04, 0x0c,
    0x03, 0x0f, 0x05, 0x00, 0x03, 0x0a, 0x04, 0x06, 0x03, 0x06, 0x04, 0x00,
    0x03, 0x03, 0x04, 0x04, 0x03, 0x00, 0x04, 0x06, 0x02, 0x0e, 0x04, 0x06,
    0x02, 0x0c, 0x03, 0x09, 0x02, 0x09, 0x02, 0x03, 0x02, 0x08, 0x02, 0x01,
    0x02, 0x06, 0x02, 0x07, 0x02, 0x04, 0x03, 0x01, 0x02, 0x04, 0x03, 0x02,
    0x02, 0x01, 0x02, 0x0b, 0x02, 0x01, 0x02, 0x09, 0x02, 0x00, 0x02, 0x0d,
    0x01, 0x0e, 0x02, 0x08, 0x01, 0x0e, 0x02, 0x06, 0x01, 0x0c, 0x02, 0x08,
    0x01, 0x0b, 0x02, 0x06, 0x01, 0x0b, 0x02, 0x02, 0x01, 0x09, 0x02, 0x07,
    0x01, 0x09, 0x02, 0x07, 0x01, 0x08, 0x02, 0x03, 0x01, 0x06, 0x02, 0x04,
    0x01, 0x06, 0x02, 0x04, 0x01, 0x03, 0x02, 0x03, 0x01, 0x01, 0x02, 0x04,
    0x01, 0x01, 0x02, 0x04, 0x00, 0x0c, 0x02, 0x02, 0x00, 0x0d, 0x01, 0x0f,
    0x00, 0x0b, 0x01, 0x0d, 0x00, 0x09, 0x01, 0x0b, 0x00, 0x0d, 0x01, 0x0a,
    0x00, 0x08, 0x01, 0x09, 0x00, 0x0b, 0x01, 0x08, 0x00, 0x0b, 0x01, 0x09,
    0x00, 0x08, 0x01, 0x09, 0x00, 0x0c, 0x01, 0x0a, 0x00, 0x09, 0x01, 0x09,
    0x00, 0x0a, 0x01, 0x0c, 0x00, 0x0c, 0x01, 0x0c, 0x00, 0x08, 0x01, 0x0a,
    0x00, 0x0c, 0x01, 0x0c, 0x00, 0x0b, 0x01, 0x0c, 0x00, 0x09, 0x01, 0x0b,
    0x00, 0x0d, 0x01, 0x0b, 0x00, 0x09, 0x01, 0x0a, 0x00, 0x0b, 0x01, 0x0a,
    0x00, 0x0b, 0x01, 0x0c, 0x00, 0x07, 0x01, 0x0e, 0x00, 0x0b, 0x02, 0x00,
    0x00, 0x08, 0x02, 0x01, 0x00, 0x06, 0x02, 0x00, 0x00, 0x09, 0x01, 0x0f,
    0x00, 0x03, 0x02, 0x00, 0x00, 0x05, 0x02, 0x01, 0x00, 0x04, 0x02, 0x02,
    0x00, 0x00, 0x02, 0x01, 0x00, 0x03, 0x02, 0x00, 0x00, 0x00, 0x01, 0x0c,
    0x08, 0x00, 0x08, 0x00, 0x08, 0x00, 0x08, 0x00, 0x08, 0x00, 0x08, 0x00,
    0x08, 0x00, 0x08, 0x00, 0x08, 0x00, 0x08, 0x00, 0x08, 0x00, 0x08, 0x00,
    0x08, 0x00, 0x08, 0x00, 0x08, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x08, 0x00, 0x08, 0x00, 0x08, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x08, 0x00, 0x08, 0x00, 0x08, 0x00,
    0x08, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x08, 0x00,
    0x08, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x08, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x08, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x08, 0x00, 0x08, 0x00, 0x08, 0x00, 0x08, 0x00, 0x08, 0x00, 0x08, 0x00,
    0x08, 0x00, 0x09, 0x0f, 0x08, 0x02, 0x08, 0x02, 0x00, 0x01, 0x00, 0x01,
    0x03, 0x0f, 0x03, 0x0f, 0x00, 0x09, 0x00, 0x08, 0x0a, 0x0b, 0x0a, 0x08,
    0x08, 0x00, 0x08, 0x00, 0x00, 0x01, 0x00, 0x01, 0x01, 0x0d, 0x03, 0x0f,
    0x09, 0x0f, 0x09, 0x0f, 0x01, 0x0f, 0x01, 0x0f, 0x01, 0x0f, 0x01, 0x0f,
    0x01, 0x0f, 0x01, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00,
    0x01, 0x01, 0x01, 0x01, 0x01, 0x05, 0x01, 0x05, 0x00, 0x00, 0x00, 0x00,
    0x05, 0x09, 0x05, 0x09, 0x01, 0x0f, 0x01, 0x0f, 0x01, 0x0f, 0x01, 0x0f,
    0x01, 0x0f, 0x01, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00,
    0x00, 0x0e, 0x00, 0x0e, 0x01, 0x05, 0x01, 0x05, 0x00, 0x00, 0x00, 0x00,
    0x05, 0x09, 0x05, 0x09, 0x01, 0x0f, 0x01, 0x0f, 0x01, 0x0f, 0x01, 0x0f,
    0x01, 0x0f, 0x01, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00,
    0x00, 0x0e, 0x00, 0x0e, 0x01, 0x05, 0x01, 0x05, 0x00, 0x00, 0x00, 0x00,
    0x05, 0x09, 0x05, 0x09, 0x01, 0x0f, 0x01, 0x0f, 0x01, 0x0f, 0x01, 0x0f,
    0x01, 0x0f, 0x01, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x01, 0x00,
    0x00, 0x0e, 0x00, 0x0e, 0x01, 0x05, 0x01, 0x05, 0x00, 0x00, 0x00, 0x00,
    0x04, 0x00, 0x04, 0x00, 0x01, 0x0f, 0x01, 0x0f, 0x01, 0x03, 0x01, 0x03,
    0x00, 0x00, 0x00, 0x00, 0x01, 0x0f, 0x01, 0x0f, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x03, 0x0c, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x08, 0x00, 0x08, 0x00, 0x0d, 0x00, 0x0d, 0x00, 0x0f, 0x00, 0x0f,
    0x00, 0x0a, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x01, 0x09, 0x01, 0x09,
    0x01, 0x0f, 0x01, 0x0f, 0x00, 0x0c, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x08, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x01, 0x03, 0x01, 0x06, 0x01, 0x07, 0x01, 0x07, 0x01, 0x06, 0x01, 0x06,
    0x01, 0x05, 0x01, 0x05, 0x01, 0x03, 0x01, 0x03, 0x00, 0x0b, 0x00, 0x0b,
    0x00, 0x00, 0x00, 0x00, 0x01, 0x09, 0x01, 0x09, 0x01, 0x0f, 0x01, 0x0f,
    0x01, 0x0f, 0x01, 0x0f, 0x01, 0x0f, 0x01, 0x0f, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x0e,
    0x00, 0x00, 0x00, 0x0a, 0x00, 0x06, 0x00, 0x06, 0x0f, 0x09, 0x0f, 0x09,
    0x03, 0x08, 0x03, 0x08, 0x03, 0x0b, 0x03, 0x0b, 0x03, 0x0b, 0x03, 0x0b,
    0x03, 0x0b, 0x03, 0x0f, 0x03, 0x0c, 0x03, 0x0d, 0x03, 0x0d, 0x03, 0x0b,
    0x03, 0x0b, 0x00, 0x00, 0x04, 0x04, 0x08, 0x03, 0xf7
]

let data = Data(bytes: rawData)

//
// Some useful extensions
//

// From https://stackoverflow.com/a/47221437/1016326
extension FixedWidthInteger {
    var byteWidth: Int {
        return self.bitWidth / UInt8.bitWidth
    }
    static var byteWidth: Int {
        return Self.bitWidth / UInt8.bitWidth
    }
}

// From https://appventure.me/2016/07/15/swift3-nsdata-data/
extension Data {
    func scanValue<T>(start: Int, length: Int) -> T {
        return self.subdata(in: start..<start+length).withUnsafeBytes { $0.pointee }
    }
    
    // Convenience to get a single byte value as integer
    func getByteAsInt(start: Int) -> Int {
        let rawValue: Byte = self.scanValue(start: start, length: Byte.byteWidth)
        return Int(rawValue)
    }
    
    func fromNybbleRepresentation() -> Data {
        var result = Data()
        let normalByteCount = self.count / 2  // N.B. Count must be even!
        var index = 0
        var offset = 0
        while index < normalByteCount {
            result += [UInt8.fromTwoNybbleData(data: self, at: offset)]
            offset += 2
            index += 1
        }
        return result
    }
}

extension Data {
    struct HexEncodingOptions: OptionSet {
        let rawValue: Int
        static let upperCase = HexEncodingOptions(rawValue: 1 << 0)
    }
    
    func hexEncodedString(options: HexEncodingOptions = []) -> String {
        let format = options.contains(.upperCase) ? "%02hhX" : "%02hhx"
        return map { String(format: format, $0) }.joined(separator: " ")
    }
}

extension UInt8 {
    static func fromTwoNybbles(n1: UInt8, n2: UInt8) -> UInt8 {
        return (n1 << 4) | n2
    }
    
    static func fromTwoNybbleData(data: Data, at offset: Int) -> UInt8 {
        let n1: UInt8 = data[offset]
        let n2: UInt8 = data[offset + 1]
        return UInt8.fromTwoNybbles(n1: n1, n2: n2)
    }
}

let nameOffset = 0
let nameSize = 16

let nameStart = nameOffset
let nameEnd = nameStart + nameSize
let nameData = Data(bytes: data.subdata(in: nameStart..<nameEnd).map{ UInt8($0 + 64) })

let name = String(data: nameData, encoding: .ascii) ?? ""

print(name)

let s1 = [1, 2, 3]
let s2 = [4, 5, 6]
let merged = zip(s1, s2).flatMap { [$0, $1] }
print(merged)

let testTwoNybble = Data([0x04, 0x0c, 0x04, 0x0f, 0x05, 0x07, 0x05, 0x03])
let testNormal = testTwoNybble.fromNybbleRepresentation()
print(testNormal.hexEncodedString())

